.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MLOCARNA 1"
.TH MLOCARNA 1 "2017-07-04" "perl v5.22.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MLocARNA \- multiple alignment of RNA
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
mlocarna [options] <fasta file>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMLocarna\fR computes a multiple sequence-structure alignment of \s-1RNA\s0
sequences. The structure of these sequences does not have to be known
but is inferred based in simultaneous alignment and folding.
.PP
Generally, mlocarna takes multiple sequences as input, given in a
fasta file. The fasta file can be extended to specify structure and
anchor constraints that respectively control the possible foldings and
possible alignments. The main outcome is a multiple alignment together
with a consensus structure.
.PP
Technically, mlocarna works as front end to the pairwise alignment
tools locarna, locarna_p, and sparse (and even carna), which are
employed to construct the multiple alignment progressively.
.PP
Going beyond the basic progressive alignment scheme, Mlocarna
implements probabilistic consistency transformation and iterative
alignment, which are available in probabilistic mode. Moreover, the
LocARNA package provides an alternative multiple alignment tool
\&\*(L"locarante\*(R", which generates alignments based on T\-Coffee using
(non-probabilistic) consistency transformation.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Load configurations from file"
.IX Subsection "Load configurations from file"
.IP "\fB\-\-configure\fR=file" 4
.IX Item "--configure=file"
Load a parameter set from a configuration file of options and option
value pairs. This enables specifying (sets of) default parameters for
mlocarna, which can still be modified by other options to
mlocarna. Command line arguments always take precedence over this
configuration. Options are specified as single entries per line;
option value pairs, like option: value.  Whitespace and '#'\-prefixed
comments are ignored.
.SS "Major alignment modes"
.IX Subsection "Major alignment modes"
.IP "\fB\fR" 4
.IX Item ""
By default, mlocarna performs progressive alignment, where the
progressive alignment steps are computed by the pairwise aligner
locarna based on sequences and dot plots (RNAfold \-p); subsequently,
partial alignmetns and their consensus dot plots.
.IP "\fB\-\-probabilistic\fR" 4
.IX Item "--probabilistic"
In probabilistic mode, mlocarna scores alignments using match
probabilities that are computed by a partition function approach
[tech. details: the probability computation is implemented in
locarna_p; the probability-based scoring is performed by locarna in
mea mode]. This enables mlocarna to consistency-transform the
probabilities (option \-\-consistency\-transform) and to compute
reliabilities.  The tool reliability\-profile.pl is provided to
visualize reliability profiles. Reliabilities can also be used for
iterating the alignment with reliably aligned base pairs as structural
constraints (option \-\-it\-reliable\-structure).
.IP "\fB\-\-sparse\fR" 4
.IX Item "--sparse"
Apply the sparsified alignment algorithm \s-1SPARSE\s0 for all pairwise
alignments (instead of the default pairwise aligner locarna). \s-1SPARSE\s0
supports stronger sparsification for faster alignment computation and
increases the structure prediction capabilities over locarna.
.SS "Controlling Output"
.IX Subsection "Controlling Output"
.IP "\fB\-\-tgtdir\fR" 4
.IX Item "--tgtdir"
Target directory. All output files are written to this directory.  Per
default the target directory is generated from the input filename by
replacing suffix fa by (or appending) out.
.IP "\fB\-v, \-\-verbose\fR" 4
.IX Item "-v, --verbose"
Turn on verbose ouput. Shows progress of computation of all\-2\-all
pairwise alignments for guide tree computation; shows intermediary
alignments during the progressive alignment computation.
.IP "\fB\-\-moreverbose\fR" 4
.IX Item "--moreverbose"
Be even more verbose: additionally shows parameters for the pairwise
aligner; moreover, the calls and output of the \s-1RNA\s0 base pair
probability computations as well as the pairwise aligner during
progressive alignment.
.IP "\fB\-q, \-\-quiet\fR" 4
.IX Item "-q, --quiet"
Be quiet.
.IP "\fB\-\-keep\-sequence\-order\fR" 4
.IX Item "--keep-sequence-order"
Preserve sequence order of the input in the final alignment.  Affects
output to stdout and results/result.aln.
.IP "\fB\-\-stockholm\fR" 4
.IX Item "--stockholm"
Write \s-1STOCKHOLM\s0 files of all final and intermediate alignments (in
addition to \s-1CLUSTALW\s0 files).
.IP "\fB\-w,\-\-width\fR=columns(120)" 4
.IX Item "-w,--width=columns(120)"
Output width for sequences in clustal-like and stockholm output; note
that the clustalw standard format requires 60 or less.
.IP "\fB\-\-write\-structure\fR" 4
.IX Item "--write-structure"
Write guidance structure in output to stdout. This provides some
insight into the influence of structure into the generated pairwise
alignments. The guidance structure shows the base pairs 'predicted' by
each pairwise locarna (or sparse) alignment. These structures should
not be mistaken as predicted consensus structures of multiple
alignments. Consensus structures can be more adequately derived from
the multiple alignment. For this reason, mlocarna reports the
consensus structure by RNAalifold.
.SS "Locality"
.IX Subsection "Locality"
.IP "\fB\-\-free\-endgaps\fR" 4
.IX Item "--free-endgaps"
Allow free endgaps. (Corresponds to pairwise locarna option \-\-free\-endgaps \*(L"++++\*(R".)
.IP "\fB\-\-free\-endgaps\-3\fR" 4
.IX Item "--free-endgaps-3"
Allow free endgaps 3'.
.IP "\fB\-\-free\-endgaps\-5\fR" 4
.IX Item "--free-endgaps-5"
Allow free endgaps 5'.
.IP "\fB\-\-sequ\-local\fR=bool(false)" 4
.IX Item "--sequ-local=bool(false)"
Turns on/off sequence locality [def=off]. Sequence locality refers to
the usual form of local alignment. If on, mlocarna bases all
calculations on local pairwise alignments, which determin the best
alignments of subsequences (disregarding dissimilar starts and
ends). Note that truely local structure alignments as well as local
multiple alignments are still a matter of research; so don't expect
perfect results in all instances.
.IP "\fB\-\-struct\-local\fR=bool(false)" 4
.IX Item "--struct-local=bool(false)"
Turns on/off structure locality [def=off]. Structural locality enables
skipping entire substructures in alignments. In pairwise alignments,
this allows one exclusion of some subsequence in each loop; thus,
guaranteeing that the (structure locally) aligned parts of the
sequences are always connected w.r.t. the predicted structure but not
necessarily consecutive in the sequence. Structure locality does not
imply sequence locality, but rather the two concepts are orthogonal.
.IP "\fB\-\-penalized\fR=score" 4
.IX Item "--penalized=score"
Variant of sequence local alignment (cf. \-\-sequ\-local), where the
specified penalty score is subtracted for each base in the local
alignment. [Experimental]
.SS "Pairwise alignment and scoring"
.IX Subsection "Pairwise alignment and scoring"
.IP "\fB\-\-indel=score\fR(\-350)" 4
.IX Item "--indel=score(-350)"
Score of each single base insertion or deletion.
.IP "\fB\-\-indel\-opening\fR=score(\-500)" 4
.IX Item "--indel-opening=score(-500)"
Score of opening an insertion or deletion, i.e. score for a
consecutive run of deletions or insertions. Indel opening score and
indel score define the affine scoring of gaps.
.IP "\fB\-m,\-\-match\fR=score(50)" 4
.IX Item "-m,--match=score(50)"
Score of a base match (unless ribosum-based scoring)
.IP "\fB\-M,\-\-mismatch\fR=\fIscore\fR\|(0)" 4
.IX Item "-M,--mismatch=score"
Score of a base mismatch (unless ribosum-based scoring)
.IP "\fB\-\-use\-ribosum\fR=bool(true)" 4
.IX Item "--use-ribosum=bool(true)"
Use ribosum scores for scoring base matches and base pair matches;
note that tau=0 suppresses any effect on the latter.
.IP "\fB\-\-ribosum\-file\fR=file" 4
.IX Item "--ribosum-file=file"
File specifying the Ribosum base and base-pair similarities. [default: use \s-1RIBOSUM85_60\s0 without requiring a Ribosum file.]
.IP "\fB\-s,\-\-struct\-weight\fR=score(200)" 4
.IX Item "-s,--struct-weight=score(200)"
Maximum weight of one predicted arc, aka base pair. Note that this
means that the maximum weight of an arc match is twice as high. The
maximum weight is assigned to base pairs with (almost) probability 1
in the dot plot; less probable base pairs receive gradually degrading
scores. The struct-weight factor balances the score contribution from
structure to the score contribution from base similarity scores
(e.g. ribosum scores).
.IP "\fB\-e,\-\-exp\-prob\fR=prob" 4
.IX Item "-e,--exp-prob=prob"
Expected probability of a base pair.
.IP "\fB\-t,\-\-tau\fR=\fIfactor\fR\|(0)" 4
.IX Item "-t,--tau=factor"
Tau factor in percent. The tau factor controls the contribution of
sequence-dependent scores to the score of arc matches.
.IP "\fB\-E,\-\-exclusion\fR=<score>(0)" 4
.IX Item "-E,--exclusion=<score>(0)"
Weight of an exclusion, i.e. an ommitted subsequence in a loop, which
applies only to structural local alignment.
.IP "\fB\-\-stacking\fR" 4
.IX Item "--stacking"
Use stacking terms. In this case, stacked arcs are scored based on
conditional probabilities (conditioned by their stacked inner arc)
rather than unconditioned base pair probabilities. [Experimental]
.IP "\fB\-\-new\-stacking\fR" 4
.IX Item "--new-stacking"
Use new stacking terms; cf. \-\-stacking. These terms directly award
bonuses to stacking. [Experimental]
.SS "Alignment heuristics"
.IX Subsection "Alignment heuristics"
Several parameters are available to speed up the pairwise alignment
computations heuristically. Choosing these parameters reasonably is
necessary to achieve good trade-off between speed and accuracy,
especially for large alignment instances.
.IP "\fB\-p,\-\-min\-prob\fR=probability(0.0005)" 4
.IX Item "-p,--min-prob=probability(0.0005)"
Minimum base pair / arc probability. Arc with lower probability in the
input \s-1RNA\s0 structure ensembles are ignored.
.IP "\fB\-P, \-\-tree\-min\-prob\fR=probability" 4
.IX Item "-P, --tree-min-prob=probability"
Minimal prob for constructing guide tree. This probability can be set
separately for the all\-2\-all comparison for constructing the guide
tree and the progressive/iterative alignment steps.
.IP "\fB\-\-max\-bps\-length\-ratio\fR=factor(0.0)" 4
.IX Item "--max-bps-length-ratio=factor(0.0)"
Maximal ratio of the number of base pairs divided by sequence length
(default: no effect)
.IP "\fB\-D,\-\-max\-diff\-am\fR=difference" 4
.IX Item "-D,--max-diff-am=difference"
Maximal difference for lengths of matched arcs. Two arcs that have a
higher difference of their lengths are ignored. This speeds up the
alignment, since less arc comparisons (i.e. less \s-1DP\s0 matrices) have to
be computed. [def: off/\-1]
.IP "\fB\-d,\-\-max\-diff\fR=difference" 4
.IX Item "-d,--max-diff=difference"
Maximal difference of the positions of any two bases that are
considered to be aligned. Bases with higher difference are generally
not aligned. This allows banding of the \s-1DP\s0 matrices and thus can
result in high speed ups. Note that the semantic changes in the
context of a reference alignment specified with max-diff-aln. Then,
the difference to the reference alignment is restricted. [def: off/\-1]
.IP "\fB\-\-max\-diff\-at\-am\fR=difference" 4
.IX Item "--max-diff-at-am=difference"
Same restriction as max-diff but only at the ends of arcs in arc
matches. [def: off/\-1]
.IP "\fB\-\-max\-diff\-aln\fR=file" 4
.IX Item "--max-diff-aln=file"
Computes \*(L"realignment\*(R" in the environment of the given reference
alignment (file in clustalw format) by constraining the maximum
difference to this reference (controlled by \-\-max\-diff). The input
sequences (and their names) have to be identical to these alignment
sequences; however the alignment is allowed to contain extra
sequences, which are ignored. In combination with option \-\-realign,
the reference alignment is taken from the (main) input file. In this
case, the 'file' argument should be '.', but is ignored (with warning)
otherwise.
.IP "\fB\-\-max\-diff\-relax\fR" 4
.IX Item "--max-diff-relax"
Relax deviation constraints (cf. \-\-max\-diff\-aln) in multiple
aligmnent. This option is useful if the default strategy for
realignment fails.
.IP "\fB\-a,\-\-min\-am\-prob\fR=probability(0.0005)" 4
.IX Item "-a,--min-am-prob=probability(0.0005)"
Minimum arc-match probability (filters output of locarna-p)
.IP "\fB\-b,\-\-min\-bm\-prob\fR=probability(0.0005)" 4
.IX Item "-b,--min-bm-prob=probability(0.0005)"
Minimum base-match probability (filters output of locarna-p)
.SS "Low-level selection of pairwise alignment tools and options"
.IX Subsection "Low-level selection of pairwise alignment tools and options"
.IP "\fB\-\-pw\-aligner\fR" 4
.IX Item "--pw-aligner"
Utilize the given tool for computing pairwise alignments
(def=locarna).
.IP "\fB\-\-pw\-aligner\-p\fR=tool" 4
.IX Item "--pw-aligner-p=tool"
Utilize the given tool for computing partition function pairwise
alignments (def=locarna_p).
.IP "\fB\-\-pw\-aligner\-options\fR" 4
.IX Item "--pw-aligner-options"
Additional option string for the pairwise alignment tool (def="").
.IP "\fB\-\-pw\-aligner\-p\-options\fR" 4
.IX Item "--pw-aligner-p-options"
Additional option string for the partition function pairwise alignment tool (def="").
.SS "Controlling the guide tree construction"
.IX Subsection "Controlling the guide tree construction"
.IP "\fB\-\-treefile\fR=file" 4
.IX Item "--treefile=file"
File with guide tree in \s-1NEWICK\s0 format. The given tree is used as guide
tree for the progressive alignment. This saves the calculation of
pairwise all-vs-all similarities and construction of the guide tree.
.IP "\fB\-\-similarity\-matrix\fR=file" 4
.IX Item "--similarity-matrix=file"
File with similarity matrix. The similarities in the matrix are used
to construct the guide tree for the progressive alignment. This saves
the calculation of pairwise all-vs-all similarities.
.IP "\fB\-\-graphkernel\fR" 4
.IX Item "--graphkernel"
Use the graphkernel for constructing the guide tree.
.IP "\fB\-\-svmsgdnspdk\fR[=program]" 4
.IX Item "--svmsgdnspdk[=program]"
Specify the svmsgdnspdk program (potentially including path). Default:
use \*(L"svmsgdnspdk\*(R" in path.
.IP "\fB\-\-fasta2shrep\fR=program" 4
.IX Item "--fasta2shrep=program"
Program \*(L"fasta2shrep\*(R" for generating graphs from the input sequences
for use with the graph kernel guide tree generation (potentially
including path). Default: use \*(L"fasta2shrep_gspan.pl\*(R" in path.
.IP "\fB\-\-fasta2shrep\-options\fR=argument\-string" 4
.IX Item "--fasta2shrep-options=argument-string"
Command line arguments for fasta2shrep. Default: \*(L"\-wins 200 \-shift 50
\&\-stack \-t 3 \-M 3\*(R".
.SS "Controlling multiple alignment construction"
.IX Subsection "Controlling multiple alignment construction"
.IP "\fB\-\-alifold\-consensus\-dp\fR" 4
.IX Item "--alifold-consensus-dp"
Employs \fBRNAalifold \-p\fR for generating consensus dotplot after each
progressive alignment step. This replaces the default consensus
dotplot computation, which averages over the input dot plots.  This
method should be used with care in combination with structural
constraints, since it ignores them for all but the pairwise alignments
of single sequences. Furthermore, note that it does not support
\&\fB\-\-stacking\fR or \fB\-\-new\-stacking\fR.
.IP "\fB\-\-local\-progressive\fR" 4
.IX Item "--local-progressive"
Align only the subalignment of locally aligned subsequences in
subsequent steps of the progressive multiple alignment. Note: this is
only effective if local alignment is turned on. (Default for
sequence local alignment; turn off by \fB\-\-global\-progressive\fR)
.IP "\fB\-\-global\-progressive\fR" 4
.IX Item "--global-progressive"
Use alignments including \*(L"locality gaps\*(R" in subsequent steps of the
progressive multiple alignment. Note: this is only effective if local
alignment is turned on. (Opposite of \fB\-\-local\-progressive\fR)
.IP "\fB\-\-consistency\-transformation\fR" 4
.IX Item "--consistency-transformation"
Apply probabilistic consistency transformation (only possible in
probabilistic mode).
.IP "\fB\-\-iterate\fR" 4
.IX Item "--iterate"
Refine iteratively after progressive alignment. Currently, iterative
refinement optimizes the \s-1SCI\s0 or \s-1RELIABILITY \s0(not the locarna score)! Iterative
refinement realigns all binary splits along the guide tree.
.IP "\fB\-\-iterations\fR=number" 4
.IX Item "--iterations=number"
Refine iteratively for given number of iterations (or stop at
convergence).
.IP "\fB\-\-extlib\fR" 4
.IX Item "--extlib"
Use library extension for base pair probabilities (experimental/not functional).
.IP "\fB\-\-it\-reliable\-structure\fR=number" 4
.IX Item "--it-reliable-structure=number"
Iterate alignment <num> times with reliable structure. This works only
in probabilistic mode, when reliabilities can be computed.
.SS "Further options for probabilistic mode"
.IX Subsection "Further options for probabilistic mode"
.IP "\fB\-\-pf\-only\-basematch\-probs\fR" 4
.IX Item "--pf-only-basematch-probs"
Use only base match probabilities (no base pair match probabilities).
.IP "\fB\-\-pf\-scale=<scale\fR>" 4
.IX Item "--pf-scale=<scale>"
Scale of partition function; use for avoiding overflow in larger instances.
.IP "\fB\-\-fast\-mea\fR" 4
.IX Item "--fast-mea"
Compute base match probabilities using Gotoh PF-algorithm.
.IP "\fB\-\-mea\-alpha\fR" 4
.IX Item "--mea-alpha"
Weight of unpaired probabilities in fast mea mode.
.IP "\fB\-\-mea\-beta\fR" 4
.IX Item "--mea-beta"
Weight of base pair match contribution in probabilistic mode.
.IP "\fB\-\-mea\-gamma\fR" 4
.IX Item "--mea-gamma"
Reserved parameter for fast-mea mode.
.IP "\fB\-\-mea\-gapcost\fR" 4
.IX Item "--mea-gapcost"
Turn on gap penalties in probabilistic/mea mode (default: off).
.IP "\fB\-\-no\-write\-bm\-probs\fR / \fB\-\-write\-bm\-probs\fR" 4
.IX Item "--no-write-bm-probs / --write-bm-probs"
Don't write / Write base match probabilities to files in target dir (default: write).
.IP "\fB\-\-no\-write\-am\-probs\fR / \fB\-\-write\-am\-probs\fR" 4
.IX Item "--no-write-am-probs / --write-am-probs"
Don't write / Write arc match probabilities to files in target dir (default: write).
.SS "Miscallaneous modes of operation"
.IX Subsection "Miscallaneous modes of operation"
.IP "\fB\-\-realign\fR" 4
.IX Item "--realign"
Realignment mode. In this mode, the input must be in clustal format
and is interpreted as alignment of the input sequences; the sequences
are obtained by removing all gap symbols. Moreover, the given
alignment is set as reference alignment for \-\-max\-diff\-aln.  Structure
and anchor constraints can be specified as consensus constraints in
the input; constraints are specified as 'alignment strings' with names
\&'#A1', '#S', or '#FS' for anchor, structure, or fixed structure
constraints, respectively. Characters in the '#A1' anchor
specification other than '\-' and '.' constrain the aligned residues in
the respective column to remain aligned (blanks are disallowed;
annotations '#A2', '#A3', ... are ignored). The consensus structure
constraint is equivalent to constraining each single sequence by the
projection of the consensus constraint to the sequence (removing all
base pairs with at least one gapped end).
.IP "\fB\-\-dp\-cache\fR=directory" 4
.IX Item "--dp-cache=directory"
Use directory <dir> as cache for dp files (useful for avoiding multiple computation).
.IP "\fB\-\-only\-dps\fR" 4
.IX Item "--only-dps"
Compute only the missing dp files, don't align (useful for filling the dp-cache).
.IP "\fB\-\-evaluate\fR=file" 4
.IX Item "--evaluate=file"
Evaluate the given multiple alignment (clustalw aln format, or use
\&\-\-eval\-fasta). This requires that probailities are already computed
(mlocarna \-\-probabilistic) and present in the target directory
(\-\-tgtdir).
.IP "\fB\-\-eval\-fasta\fR" 4
.IX Item "--eval-fasta"
Assume that alignment for evaluation (cf. \-\-evaluate) is in fasta format.
.SS "Constraints"
.IX Subsection "Constraints"
.IP "\fB\-\-anchor\-constraints=<file\fR>" 4
.IX Item "--anchor-constraints=<file>"
Read anchor constraints from bed format specification.
.Sp
Anchor constraints in four-column bed format specify positions of
named anchor regions per sequence. The 'contig' names have to
correspond to the fasta input sequence names. Anchor names must be
unique per sequence and regions of the same name for different
sequences must have the same length. This constrains the alignment to
align all regions of the same name.
.Sp
The specification of anchors via this option removes all anchor
definitions that may be given directly in the fasta input file!
.IP "\fB\-\-ignore\-constraints\fR" 4
.IX Item "--ignore-constraints"
Ignore all constraints (anchor and structure constraints) even if given.
.SS "Rna folding (RNAfold/RNAplfold)"
.IX Subsection "Rna folding (RNAfold/RNAplfold)"
.IP "\fB\-\-noLP\fR / \fB\-\-LP\fR" 4
.IX Item "--noLP / --LP"
Disallow/Allow lonely pairs (default: Disallow).
.IP "\fB\-\-maxBPspan\fR" 4
.IX Item "--maxBPspan"
Limit maximum span of base pairs (default off).
.IP "\fB\-\-relaxed\-anchors\fR" 4
.IX Item "--relaxed-anchors"
Relax semantics of anchor constraints (default off, meaning 'strict'
semantics). For lexicographically ordered anchors, where each sequence
is annotated with exactly the same names, both semantics are
equivalent; thus, in this common case, the subtle differences can be
ignored. In strict semantics, anchor names must be ordered
lexicographically and can only be aligned in this order. In relaxed
semantics, the only requirement is that equal anchor names are
matched. Consequently, anchor names that don't occur in all sequences
could be overwritten (if two names are assigned to the same position)
or even introduce inconsistencies.
.IP "\fB\-\-plfold\-span=span\fR" 4
.IX Item "--plfold-span=span"
Use RNAplfold with span.
.IP "\fB\-\-plfold\-winsize=ws\fR" 4
.IX Item "--plfold-winsize=ws"
Use RNAplfold with window of size ws (default=2*span).
.IP "\fB\-\-rnafold\-parameter=<file\fR>" 4
.IX Item "--rnafold-parameter=<file>"
Parameter file for RNAfold (RNAfold's \-P option)
.IP "\fB\-\-rnafold\-temperature=<temp\fR>" 4
.IX Item "--rnafold-temperature=<temp>"
Temperature for RNAfold (RNAfold's \-T option)
.IP "\fB\-\-skip\-pp\fR" 4
.IX Item "--skip-pp"
Skip computation of pair probs if the probabilities are already
existing. Non-existing ones are still computed.
.IP "\fB\-\-no\-bpp\-precomputation\fR" 4
.IX Item "--no-bpp-precomputation"
Switch off precomputation of base pair probabilties. Overwrite
potentially existing input files.  (compare skip-pp). For use with
special pairwise aligners (e.g. locarna_n) that recompute the base
pair probabilities at each invokation.
.IP "\fB\-\-in\-loop\-probabilities\fR" 4
.IX Item "--in-loop-probabilities"
Turn on precomputation of in loop probabilties. For use with special
pairwise aligners (e.g. locarna_n) that use such probabilities.
.SS "Multithreading"
.IX Subsection "Multithreading"
.IP "\fB\-\-threads, \-\-cpus\fR=number" 4
.IX Item "--threads, --cpus=number"
Use the given number of threads for computing pair probabilities and
all\-2\-all alignments in parallel (multicore/processor support).
.SS "Getting Help"
.IX Subsection "Getting Help"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Brief help message
.IP "\fB\-\-man\fR" 4
.IX Item "--man"
Full documentation
.PP
The sequences are given in input file <file> in mfasta
format.  All results are written to a target directory <dir>. If the
file tree is given, contained tree (in NEWICK-tree format) is used as
guide tree for the progressive alignment. The final results are
collected in <tgtdir>/results. The final multiple alignment is
<tgtdir>/results/result.aln.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Calling mlocarna"
.IX Subsection "Calling mlocarna"
[Note that the LocARNA distribution provides files of the following and other
examples in Data/Examples.]
.PP
Sequences are typically given in plain fasta format like
.PP
.Vb 9
\&  example.fa:
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  >fruA
\&  CCUCGAGGGGAACCCGAAAGGGACCCGAGAGG
\&  >fdhA
\&  CGCCACCCUGCGAACCCAAUAUAAAAUAAUACAAGGGAGCAGGUGGCG
\&  >vhuU
\&  AGCUCACAACCGAACCCAUUUGGGAGGUUGUGAGCU
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
To align these sequences, simply call
.PP
.Vb 1
\&  mlocarna example.fa
.Ve
.PP
Usually, it makes sense to set additional options; this is either done
on the command line or via configuration files. A reasonable
small configuration for global alignment of large instances would be
.PP
.Vb 11
\&  short\-example.cfg
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  max\-diff\-am: 25
\&  max\-diff:    60
\&  min\-prob:    0.01
\&  plfold\-span: 100
\&  indel:       \-50
\&  indel\-open:  \-750
\&  threads:     8   # <\- adapt to your hardware
\&  alifold\-consensus\-dp
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
To use it, call
.PP
.Vb 1
\&  mlocarna \-\-config short\-example.cfg example.fa
.Ve
.PP
which is equivalent to
.PP
.Vb 4
\&  mlocarna \-\-max\-diff\-am 25 \-\-max\-diff 60 \-\-min\-prob 0.01 \e
\&           \-\-indel \-50 \-\-indel\-open \-750 \e
\&           \-\-plfold\-span 100 \-\-threads 8 \-\-alifold\-consensus\-dp \e
\&           example.fa
.Ve
.PP
For  probabilistic alignment with consistency transformation, call
.PP
.Vb 1
\&  mlocarna \-\-probabilistic \-\-consistency\-transform example.fa
.Ve
.PP
In both cases, mlocarna writes the main results to stdout and more
detailed results to the target directory example.out. The results
directory is overwritten if it exists already. To avoid this, one can
specify the target directory (\-\-tgtdir).
.SS "Use of constraints"
.IX Subsection "Use of constraints"
Mlocarna supports structure constraints for folding and anchor
constraints for alignment. Both types of constraints can be specified
in extension of the standard fasta format via 'constraint
lines'. Fasta-ish input with constraints looks like this
.PP
.Vb 10
\&  example\-w\-constraints.fa
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  >A
\&  GACCCUGGGAACAUUAACUACUCUCGUUGGUGAUAAGGAACA
\&  ..((.(....xxxxxx...................))).xxx #S
\&  ..........000000.......................111 #1
\&  ..........123456.......................123 #2
\&  >B
\&  ACGGAGGGAAAGCAAGCCUUCUGCGACA
\&  .(((....xxxxxx.......))).xxx #S
\&  ........000000...........111 #1
\&  ........123456...........123 #2
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
The same anchor constraints (like by the lines tagged #1, #2) can
alternatively be specified in bed format by the entries
.PP
.Vb 7
\&  example\-anchors.bed
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  A     10      16      first_box
\&  B     8       14      first_box
\&  A     39      42      ACA\-box
\&  B     25      28      ACA\-box
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
where anchor regions (boxes) have arbitrary but matching names
and contig/sequence names correspond to the sequence names
of the fasta(\-like) input.
.PP
Given, e.g.
.PP
.Vb 9
\&  example\-wo\-anchors.fa
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  >A
\&  GACCCUGGGAACAUUAACUACUCUCGUUGGUGAUAAGGAACA
\&  ..((.(....xxxxxx...................))).xxx #S
\&  >B
\&  ACGGAGGGAAAGCAAGCCUUCUGCGACA
\&  .(((....xxxxxx.......))).xxx #S
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
once calls
.PP
.Vb 1
\&  mlocarna \-\-anchor\-constraints example\-anchors.bed  example\-wo\-anchors.fa
.Ve
.SS "Realignment"
.IX Subsection "Realignment"
In realignment mode (option \-\-realign), mlocarna is called with an
input alignment in clustal format, e.g.
.PP
.Vb 1
\&  mlocarna \-\-realign example\-realign.aln
.Ve
.PP
This allows to define constraints as 'consensus constraints' in the input, e.g.
.PP
.Vb 8
\&  example\-realign.aln
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  fruA               \-\-CCUCGAGGGGAACCCGAA\-\-\-\-\-\-\-\-\-\-\-\-\-AGGGACCCGAGAGG\-\-
\&  vhuU               AGCUCACAACCGAACCCAUU\-\-\-\-\-\-\-\-\-\-\-\-\-UGGGAGGUUGUGAGCU
\&  fdhA               CGCCACCCUGCGAACCCAAUAUAAAAUAAUACAAGGGAGCAG\-GUGGCG
\&  #A1                ..*...........CCC.............................5..
\&  #S                 ((((((.((((...(((.................))).)))).))))))
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
Note that anchor names are arbitrary and the consensus structure is
\&'projected' to the single sequences.  Moreover, the input alignment
can be used as reference for fast limited realignment, e.g. call to
realign in distance 5 of the reference alignment:
.PP
.Vb 1
\&  mlocarna \-\-realign example\-realign.aln \-\-max\-diff 5 \-\-max\-diff\-aln .
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Sebastian Will
Christina Otto (ExpaRNA-P, sparsification classes for ExpaRNA-P and \s-1SPARSE\s0)
Milad Miladi (\s-1SPARSE\s0)
.SH "ONLINE INFORMATION"
.IX Header "ONLINE INFORMATION"
For download and online information, see
<http://www.bioinf.uni\-freiburg.de/Software/LocARNA>
.SH "REFERENCES"
.IX Header "REFERENCES"
Sebastian Will, Kristin Reiche, Ivo L. Hofacker, Peter F. Stadler, and
Rolf Backofen.  Inferring non-coding \s-1RNA\s0 families and classes by means
of genome-scale structure-based clustering.  \s-1PLOS\s0 Computational
Biology, 3 no. 4 pp. e65, 2007.
doi: 10.1371/journal.pcbi.0030065
.PP
Sebastian Will, Tejal Joshi, Ivo L. Hofacker, Peter F. Stadler,
and Rolf Backofen. LocARNA-P: Accurate boundary prediction and
improved detection of structural RNAs. \s-1RNA, 18\s0 no. 5 pp. 900\-914, 2012.
doi: 10.1261/rna.029041.111
.PP
Sebastian Will, Michael Yu, and Bonnie Berger. Structure-based Whole
Genome Realignment Reveals Many Novel Non-coding RNAs. Genome Research,
no. 23 pp. 1018\-1027, 2013. doi: 10.1101/gr.137091.111
